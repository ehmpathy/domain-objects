import omit from 'lodash.omit';

import { assertDomainObjectIsSafeToManipulate } from '../constraints/assertDomainObjectIsSafeToManipulate';
import { DomainEntity } from '../instantiation/DomainEntity';
import { DomainObject } from '../instantiation/DomainObject';
import { DomainValueObject } from '../instantiation/DomainValueObject';
import { DomainEntityUniqueKeysMustBeDefinedError } from './DomainEntityUniqueKeysMustBeDefinedError';

const BASE_CASE_AUTOGENERATED_KEYS = ['id', 'uuid', 'createdAt', 'updatedAt', 'effectiveAt'];

/**
 * exposes a function which properly handles any value that can could have been defined for an object property
 * - if domain object, omits autogenerated values
 * - if array, recursively omits on each item in the array
 * - if neither of the above, then its the terminal condition - return it, its fully omitted
 */
const recursivelyOmitAutogeneratedValuesFromObjectValue: any = (thisValue: any) => {
  // handle directly nested domain object
  if (thisValue instanceof DomainObject) return omitAutogeneratedValues(thisValue); // eslint-disable-line @typescript-eslint/no-use-before-define

  // handle an array of one level deep (doesn't handle Array of Array, for simplicity)
  if (Array.isArray(thisValue)) return thisValue.map(recursivelyOmitAutogeneratedValuesFromObjectValue); // run self on each item in the array, (i.e., recursively)

  // handle any other value type
  return thisValue;
};

/**
 * omits all autogenerated values on a domain object
 *
 * features:
 * - understands which properties of a domain object are autogenerated vs naturally defined
 *   - for all domain objects
 *     - id is autogenerated
 *     - createdAt is autogenerated
 *     - updatedAt is autogenerated, when applicable
 *     - effectiveAt is autogenerated, when applicable
 *   - for value objects
 *     - uuid is always autogenerated
 *   - for entities specifically
 *     - uuid is autogenerated, unless it is specified as the property the entity is unique on
 * - recursive, applies omission deeply
 *  - does not remove the uniquely identifying properties of a domain object, so this does not irrecoverably loose any information
 */
export const omitAutogeneratedValues = <T extends DomainObject<Record<string, any>>>(obj: T): T => {
  // make sure its an instance of DomainObject
  if (!(obj instanceof DomainObject))
    throw new Error(
      'omitAutogeneratedValues called on object that is not an instance of a DomainObject. Are you sure you instantiated the object? (Related: see `DomainObject.nested`)',
    );

  // determine if its an entity or a value object
  const isEntity = obj instanceof DomainEntity;
  const isValueObject = obj instanceof DomainValueObject;
  const Constructor = (obj.constructor as any) as { new (...args: any): T }; // https://stackoverflow.com/a/61444747/3068233

  // make sure that its safe to manipulate
  assertDomainObjectIsSafeToManipulate(obj);

  // object with omit applied recursively on each property
  const objectWithEachDomainObjectKeyRecursivelyOmitted: typeof obj = Object.entries(obj).reduce((summary, [thisKey, thisValue]) => {
    return { ...summary, [thisKey]: recursivelyOmitAutogeneratedValuesFromObjectValue(thisValue) };
  }, {} as typeof obj);

  // handle the base case, where the uuid is always autogenerated
  const objWithoutBaseCaseAutogeneratedValues = omit(objectWithEachDomainObjectKeyRecursivelyOmitted, BASE_CASE_AUTOGENERATED_KEYS);

  // if this is a value object, then base case is sufficient
  if (isValueObject) return new Constructor(objWithoutBaseCaseAutogeneratedValues);

  // if this is an entity, then we need to check if uuid is part of the unique values
  if (isEntity) {
    const uniqueKeys = (obj.constructor as typeof DomainEntity).unique;
    const className = (obj.constructor as typeof DomainEntity).name;
    if (!uniqueKeys)
      throw new DomainEntityUniqueKeysMustBeDefinedError({ entityName: className, nameOfFunctionNeededFor: 'omitAutogeneratedValues' });
    if (uniqueKeys.includes('uuid')) return new Constructor({ ...objWithoutBaseCaseAutogeneratedValues, uuid: (obj as any).uuid }); // if unique keys include `uuid`, then `uuid` is not autogenerated - add it back
    return new Constructor(objWithoutBaseCaseAutogeneratedValues); // otherwise, if uuid is not part of unique keys, then the base case applies here too
  }

  // throw error we get here, this is unexpected
  throw new Error(
    `DomainObject must be an instance of a DomainEntity, DomainEvent, or a DomainValueObject to run omitAutogeneratedValues - not a generic DomainObject. '${obj.constructor.name}' does not meet that criteria.`,
  );
};
