import pick from 'lodash.pick';

import { DomainEntity } from '../instantiation/DomainEntity';
import { DomainValueObject } from '../instantiation/DomainValueObject';
import { DomainObject } from '../instantiation/DomainObject';

export const getUniqueIdentifier = <T extends DomainObject<T>>(obj: DomainEntity<T> | DomainValueObject<T>): Partial<T> => {
  if (obj instanceof DomainEntity) {
    const uniqueKeys = (obj.constructor as typeof DomainEntity).unique;
    const className = (obj.constructor as typeof DomainEntity).name;
    if (!uniqueKeys) throw new Error(`\`${className}.unique\` must be defined, to be able to \`getUniqueIdentifier\``);
    return pick(obj, uniqueKeys);
  }
  if (obj instanceof DomainValueObject) {
    const ignoreList = ['uuid', 'id']; // these are keys we should always ignore, because value objects are unique on their natural keys - not autogenerated db keys
    const uniqueKeys = Object.keys(obj).filter((key) => !ignoreList.includes(key)); // value objects are unique on all keys, other than the autogenerated ones we ignore
    return pick(obj, uniqueKeys);
  }
  throw new Error('unexpected domain object provided; cant get unique identifier');
};
