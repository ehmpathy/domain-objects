import omit from 'lodash.omit';

import { assertDomainObjectIsSafeToManipulate } from '../constraints/assertDomainObjectIsSafeToManipulate';
import { DomainObject } from '../instantiation/DomainObject';
import { getMetadataKeys } from './getMetadataKeys';

/**
 * exposes a function which properly handles any value that can could have been defined for an object property
 * - if domain object, omits autogenerated values
 * - if array, recursively omits on each item in the array
 * - if neither of the above, then its the terminal condition - return it, its fully omitted
 */
const recursivelyOmitMetadataValuesFromObjectValue: any = (thisValue: any) => {
  // handle directly nested domain object
  if (thisValue instanceof DomainObject) return omitMetadataValues(thisValue); // eslint-disable-line @typescript-eslint/no-use-before-define

  // handle an array of one level deep (doesn't handle Array of Array, for simplicity)
  if (Array.isArray(thisValue))
    return thisValue.map(recursivelyOmitMetadataValuesFromObjectValue); // run self on each item in the array, (i.e., recursively)

  // handle any other value type
  return thisValue;
};

/**
 * omits all metadata values on a domain object
 *
 * relevance:
 * - often in change detection, metadata values are not relevant, this provides an easy way to omit them
 *
 * features:
 * - utilizes the `.metadata` property of the domain object definition to identify metadata keys
 *   - recall, the default is `id`, `uuid`, `createdAt`, `updatedAt`, `effectiveAt`
 * - recursive, applies omission deeply
 */
export const omitMetadataValues = <T extends DomainObject<Record<string, any>>>(
  obj: T,
): T => {
  // make sure its an instance of DomainObject
  if (!(obj instanceof DomainObject))
    throw new Error(
      'omitMetadataValues called on object that is not an instance of a DomainObject. Are you sure you instantiated the object? (Related: see `DomainObject.nested`)',
    );

  // get the metadata keys
  const Constructor = obj.constructor as any as { new (...args: any): T }; // https://stackoverflow.com/a/61444747/3068233
  const metadataKeys = getMetadataKeys(obj, {
    nameOfFunctionNeededFor: 'omitMetadataValues',
  });

  // make sure that its safe to manipulate
  assertDomainObjectIsSafeToManipulate(obj);

  // object with omit applied recursively on each property
  const objectWithEachDomainObjectKeyRecursivelyOmitted: typeof obj =
    Object.entries(obj).reduce((summary, [thisKey, thisValue]) => {
      return {
        ...summary,
        [thisKey]: recursivelyOmitMetadataValuesFromObjectValue(thisValue),
      };
    }, {} as typeof obj);

  // omit all of the metadata keys
  const objWithoutBaseCaseAutogeneratedValues = omit(
    objectWithEachDomainObjectKeyRecursivelyOmitted,
    metadataKeys,
  );

  // return the instantiated object
  return new Constructor(objWithoutBaseCaseAutogeneratedValues);
};
